package session

import (
	"errors"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/gorilla/context"
	"github.com/gorilla/sessions"
	"goframework/src/framework/utils/logger"
	"net/http"
)

// session相关常量
const (
	sessionNameWithContext  = "tenant"               // 和context关联的名称，根据该名称获取context里的session对象
	sessionNameWithRegistry = "monitor_session"      // 和request关联的名称，根据该名称获取与某个request关联的session及store对象
	DefaultStoreKeyPrefix   = "tenant:"              // store里存储数据时的key
	DefaultSessionSecret    = "ACtjU8wiey54EXinxPZ5" // cookie加密密钥
)

// newStore 生成redis store对象
func newStore() *RedisClusterStore {
	s, _ := NewRedisClusterStore(
		DefaultStoreKeyPrefix,
		0,
		0,
		false,
		true,
		http.SameSiteStrictMode,
		[]byte(DefaultSessionSecret),
	)
	return s
}

// Session 自定义一个session接口，实例化以后，被用户调用
type Session interface {
	// ID of the session, generated by stores. It should not be used for user data.
	ID() string
	// Get returns the session value associated to the given key.
	Get(key interface{}) interface{}
	// Set sets the session value associated to the given key.
	Set(key interface{}, val interface{})
	// Delete removes the session value associated to the given key.
	Delete(key interface{})
	// Clear deletes all values in the session.
	Clear()
	// Save saves all sessions used during the current request.
	Save() error
	// SetMaxAge set max age.
	SetMaxAge(n int)
}

// mySession 定义一个session对象，并实现Session接口的方法
// 仿写自：github.com/gin-contrib/sessions
type mySession struct {
	name    string
	request *http.Request
	store   *RedisClusterStore
	session *sessions.Session
	written bool
	writer  http.ResponseWriter
}

// Session 自定义session转换方法
func (s *mySession) toGorillaSession() *sessions.Session {
	if s.session == nil {
		var err error
		s.session, err = s.store.Get(s.request, s.name)
		if err != nil {
			logger.Logger.Error(fmt.Sprintf("[sessions] ERROR! %s\n", err))
		}
	}
	return s.session
}

// ID 实现自定义session的ID方法
func (s *mySession) ID() string {
	return s.toGorillaSession().ID
}

// Set 实现自定义session的set方法
func (s *mySession) Set(key, value interface{}) {
	s.toGorillaSession().Values[key] = value
	s.written = true
}

// Get 实现自定义session的get方法
func (s *mySession) Get(key interface{}) interface{} {
	return s.toGorillaSession().Values[key]
}

// Delete 实现自定义session的delete方法
func (s *mySession) Delete(key interface{}) {
	delete(s.toGorillaSession().Values, key)
	s.written = true
}

// Clear 实现clear方法
func (s *mySession) Clear() {
	for key := range s.toGorillaSession().Values {
		s.Delete(key)
	}
}

// Save 实现save方法
func (s *mySession) Save() error {
	if s.Written() {
		e := s.toGorillaSession().Save(s.request, s.writer)
		if e == nil {
			s.written = false
		}
		return e
	}
	return nil
}

// Written 是否可以保存
func (s *mySession) Written() bool {
	return s.written
}

// SetMaxAge 调整cookie的max age
func (s *mySession) SetMaxAge(age int) {
	s.session.Options.MaxAge = age
	s.store.SetMaxAge(age)
}

// WithSessionRedis session中间件，主要目的是创建一个session对象，并放到context里
func WithSessionRedis(name string) gin.HandlerFunc {
	return func(c *gin.Context) {
		if name == "" {
			name = sessionNameWithRegistry
		}
		s := &mySession{name, c.Request, newStore(), nil, false, c.Writer}

		c.Set(sessionNameWithContext, s)
		defer context.Clear(c.Request)
		c.Next()
	}
}

// DefaultSession 获取session
func DefaultSession(c *gin.Context) Session {
	return c.MustGet(sessionNameWithContext).(Session)
}

func GetSessionData(ctx *gin.Context) (data map[string]interface{}, err error) {
	tenantInfo := DefaultSession(ctx).Get("tenantInfo")
	if sessionData, ok := tenantInfo.(map[string]interface{}); ok {
		return sessionData, nil
	}
	return data, errors.New("session数据解析失败")
}
